////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Module:        path
//
// Version:       1.0
//
// Modifications: 
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#ifndef  __PATH_HPP__
#define __PATH_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include "iter.hpp"
#include "node.hpp"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace ev4 {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template<typename __Type> class path
{
   public:   // type definitions and constants

      typedef char value_type;
      typedef std::size_t size_type;
      typedef char* pointer;
      typedef char& reference;
      typedef const char* const_pointer;
      typedef const char& const_reference;
      typedef std::ptrdiff_t difference_type;
      typedef forward_list_iterator<value_type> iterator;
      typedef const_forward_list_iterator<value_type> const_iterator;

   private:   // private type definitions

      typedef foward_node<char> _node;

   private:   // member variables

      __Type _m_file;
      char* _m_path;
      size_type _m_size;
      bool _m_is_open;

   public:   // member functions

      void close() { _close(); }
      void open() { _open(_m_path); }

   public:   // constructor | destructor

      path(const char* _path) : _m_path(const_cast<char*>(_path)), _m_size(0), _m_is_open(false) { }

   private:   // helper functions

      void _close() { if (is_open) { _m_file.close(); _m_is_open = false; } }
      void _open(char* _path) { _m_file(_m_path); _m_file.open(); _m_is_open = true; }

};   // end of class path

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

}   // end namespace(ev4)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#endif   // __PATH_HPP__