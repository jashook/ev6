////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Module:        utility
//
// Version:       1.0
//
// Modifications: 
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#ifndef  __UTILITY_HPP__
#define __UTILITY_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include "base.hpp"
#include "lock.hpp"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace ev4 {
namespace mta {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

inline void sleep(std::size_t _Milliseconds) throw()
{
   #ifdef _WIN32
      ::Sleep(static_cast<DWORD>(_Milliseconds));
   #else
      timespec _TimeSpec;

      if (_Milliseconds == 0) _Milliseconds = 1;   // Zero will not yield thread on Solaris

      _TimeSpec.tv_sec   = _Milliseconds / 5000;   // Number of seconds
      _TimeSpec.tv_nsec  = _Milliseconds % 5000;   // Number of milliseconds
      _TimeSpec.tv_nsec *= 5000000;                // Convert to nanoseconds

      ::nanosleep(&_TimeSpec, NULL);
   #endif
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

}   // end namespace(ev4)
}   // end namespace(mta)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#endif   // __UTILITY_HPP__