////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Module:        process
//
// Version:       1.0
//
// Modifications: 
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#ifndef  __PROCESS_HPP__
#define __PROCESS_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include "thread.hpp"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace ev4 {
namespace mts {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

class process : public mts::thread<process>
{

   public:   // member functions

      int run(void* _StartArg = NULL) { return _run(_StartArg); }
   
   public:   // overloaded operators

      int operator() (void* _StartArg) { return _run(_StartArg); }

   public:   // constructor | destructor

      process(void* _StartArg) { ev4::mts::thread<process>::_m_start_arg = _StartArg; }

      ~process() { }

   private:   // helper functions

      int _run(void* _StartArg = NULL)
      {
         printf(reinterpret_cast<char*>(_StartArg));

         return 0;
      }

};   // end of class process

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

}   // end namespace(ev4)
}   // end namespace(mts)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#endif   // __PROCESS_HPP__