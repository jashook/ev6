////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Module:        lock_handle
//
// Version:       1.0
//
// Modifications: 
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#ifndef  __LOCK_HANDLE_HPP__
#define __LOCK_HANDLE_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include "base.hpp"
#include "lock.hpp"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace ev4 {
namespace mts {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

class lock_handle
{
   private:   // member variables
      
      lock& _m_lock;

   public:   // member functions

      void get_lock() throw() { _get_lock(); }
      void release_lock() throw() { _release_lock(); }

   public:   // constructor | destructor

      explicit lock_handle(lock& _Lock) throw() : _m_lock(_Lock) { _ctor(); }
      explicit lock_handle(lock* _Lock = NULL) throw() : _m_lock(*_Lock) { _ctor(); }

      ~lock_handle() throw() { _dtor(); }

   private:   // helper functions

      void _ctor() throw() { _m_lock.get_lock(); }

      void _dtor() throw() { _m_lock.release_lock(); }

      void _get_lock() throw() { _m_lock.get_lock(); }

      void _release_lock() { _m_lock.release_lock(); }


};   // end of class lock

// non member functions

inline bool test_lock(ev4::mts::lock& _Lock)
{
   bool _Result = _Lock.try_lock();
   _Lock.release_lock();
   return _Result;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

}   // end namespace(ev4)
}   // end namespace(mts)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#endif   // __LOCK_HPP__