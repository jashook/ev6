////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Author: Jarret Shook
//
// Module: stack.hpp
//
// Modifications: 
//
// 22-Jan-13: Version 1.1: Cleaned and changed to namespace ev6
// 27-Dec-12: Version 1.0: Created
//
// Timeperiod: ev6
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#ifndef __STACK_HPP__
#define __STACK_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include "linked_list.hpp"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace ev6 {
namespace el {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template < typename __Type > class stack
{
   private:   // member variables

      linked_list<__Type> _m_list;

   public:   // constructor | destructor

      stack() { }
      stack(__Type& _Value) { _m_list.push_back(_Value); }

   public:   // member functions

      __Type pop() { return _pop(); }
      void push(__Type& _Value) { _push(_Value); }
      std::size_t size() { return _size(); }

   private:   // helper functions

      __Type _pop()
      {
         return _m_list.pop_back();
      }

      void _push(__Type& _Value)
      {
         _m_list.push_back(_Value);
      }

      std::size_t _size()
      {
         return _m_list.size();
      }

};   // end of class stack

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

}   // end of namespace(el)
}   // end of namespace(ev6)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#endif   // __ITER_HPP__
