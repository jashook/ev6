////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Module:        write
//
// Version:       1.0
//
// Modifications: 
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#ifndef  __WRITE_HPP__
#define __WRITE_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include <queue>

#include "thread.hpp"
#include "utility.hpp"
#include "write_handle.hpp"
#include "lock.hpp"
#include "lock_handle.hpp"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace ev4 {
namespace mts {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

class write : public mts::thread<write>
{

   public:   // member functions
   
   public:   // overloaded operators

      int operator() (void* _StartArg) { return _run(_StartArg); }

   public:   // constructor | destructor

      write() { }

      ~write() { }

   private:   // helper functions

      int _run(void* _StartArg = NULL)
      {
         std::pair< std::queue<int>*, ev4::mts::lock*>* _Pair = reinterpret_cast< std::pair< std::queue<int>*, ev4::mts::lock*>* >(_StartArg);

         for (std::size_t i = 0; i < 1000000; ++i) { ev4::mts::lock_handle(_Pair->second); _Pair->first->push(i); }

         //_Queue->flush();

         return 0;
      }

};   // end of class write

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

}   // end namespace(ev4)
}   // end namespace(mts)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#endif   // __write_HPP__