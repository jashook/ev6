////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Module:        read
//
// Version:       1.0
//
// Modifications: 
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#ifndef  __READ_HPP__
#define __READ_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <queue>

#include "thread.hpp"
#include "queue.hpp"
#include "utility.hpp"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace ev4 {
namespace mts {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

class read : public mts::thread<read>
{

   public:   // member functions
   
   public:   // overloaded operators

      int operator() (void* _StartArg) { return _run(_StartArg); }

   public:   // constructor | destructor

      read() { }

      ~read() { }

   private:   // helper functions

      void _print(ev4::mts::brokered_queue<int>* _Queue)
      {
         std::cout << _Queue->pop() << " "; 
      }

      int _run(void* _StartArg = NULL)
      {
         std::pair< std::queue<int>*, ev4::mts::lock*>* _Pair = reinterpret_cast<std::pair< std::queue<int>*, ev4::mts::lock*>*>(_StartArg);

         for (std::size_t i = 0; i < 1000000; ++i)
         {
            ev4::mts::lock_handle(_Pair->second);
            _Pair->first->front();
            _Pair->first->pop();
         }

         return 0;
      }

};   // end of class read

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

}   // end namespace(ev4)
}   // end namespace(mts)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#endif   // __read_HPP__