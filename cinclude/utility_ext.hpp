////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Module:        utility_ext
//
// Version:       1.0
//
// Modifications: 
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#ifndef  __UTILITY_EXT_HPP__
#define __UTILITY_EXT_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include "utility.hpp"
#include "linked_list.hpp"
#include "linked_list_ts.hpp"
#include "raw_list.hpp"
#include "lock_handle.hpp"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace ev4 {
namespace mta {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template <typename __Type> void move_from_linked_list(ev4::linked_list<__Type>& _Lhs, mts::linked_list_ts<__Type>& _Rhs)
{
   lock_handle _Lock(get_lock());

   raw_list<__Type>* _Llist = _Lhs.to_raw_list();
   raw_list<__Type>* _Rlist = _Rhs.to_raw_list();

   _Llist += _Rlist;

   _Rhs = _Llist;
}

template <typename __Type> void move_from_linked_list_ts(mts::linked_list_ts<__Type>& _Lhs, linked_list<__Type>& _Rhs)
{
   lock_handle _Lock(get_lock());

   raw_list<__Type>* _Llist = _Lhs.to_raw_list();
   raw_list<__Type>* _Rlist = _Rhs.to_raw_list();

   _Llist += _Rlist;

   _Rhs = _Llist;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

}   // end namespace(ev4)
}   // end namespace(mta)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#endif   // __UTILITY_EXT_HPP__