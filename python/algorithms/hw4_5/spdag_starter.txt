# Elena Villamil, Jarret Shook
# Starter code to HW4 Q1: find shortest path in a DAG

# From Chapter 4:
def topsort(G):
   count = dict((u, 0) for u in G)             # The in-degree for each node
   for u in G:
      for v in G[u]:
         count[v] += 1  #Count every in-edge
   Q = [u for u in G if count[u] == 0]         # Valid initial nodes
   S = []                 #The result
   while Q:               #While we have start nodes...
      u = Q.pop()        #Pick one
      S.append(u)        #Use it as first of the rest
      for v in G[u]:
         count[v] -= 1  #"Uncount" its out-edges
         if count[v] == 0: # New valid start nodes?
            Q.append(v)   #Deal with them next
   return S

def dag_spp(W, s, t):       #Shortest path from s to t
   #Modify the following code to build the parent dictionary
   #and the shortest path
   d = {u:float('inf') for u in W}             # Distance estimates
   d[s] = 0               #Start node: Zero distance
   P = {}                 #parent dictionary
   P[s] = None            #starting node has no parent
   path = []              #shortest path list
   for u in topsort(W):   #In top-sorted order...
      if u == t: break   #Have we arrived?
      for v in W[u]:     #For each out-edge ...
         d[v] = min(d[v], d[u] + W[u][v])    # Relax the edge
   return d[t],path,P  #return the distance, shortest path, and parent dict.

G1 ={'a': {'b':3, 'c':4},
   'b': {'c':7},
   'c': {'d':9, 'f':8},
   'd': {'e':2, 'f': -6},
   'e': {'f':3},
   'f': {}
}

G2 = {
   'a': {'b':0},
   'b': {'c':4, 'd':6},
   'c': {'g':2, 'h':-6},
   'd': {'f':3, 'e':5},
   'e': {'g':0, 'h':-6},
   'f': {'i':-1},
   'g': {'h':4},
   'h': {'i':7},
   'i': {}
}

if __name__=='__main__':
   print "shortest path from a to f in G1"
   print dag_spp(G1, 'a', 'f')
   print "shortest path from a to i in G2"
   print dag_spp(G2, 'a', 'i')
   print "shortest path from b to f in G1"
   print dag_spp(G1, 'b', 'f')
   print "shortest path from a to e in G1"
   print dag_spp(G1, 'a', 'e')
