////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Author: Jarret Shook
//
// Module: user.hpp
//
// Modifications: 
//
// 26-Aug-12: Version 1.0 - Created
//
// Timeperiod: ev6
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#ifndef __USER_HPP__
#define __USER_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include <string>

#include "permissions.hpp"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace LAB {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

class user
{
	private: // Member Variables

		LAB::permissions* _m_permission;
                
      std::size_t  _m_user_id;
               
		std::string* _m_first_name;
		std::string* _m_last_name;

	public: // Constructor | Destructor

		user();
		user(std::size_t, std::size_t);
      user(const user&);
		~user();
	
	public: // Member Functions

      std::size_t get_user_id();
		std::vector< std::pair<std::size_t, std::string*>* > get_user_permissions();
                
 	   std::string get_first_name();
		std::string get_last_name();

      void set_user_id(std::size_t);
		void set_user_permission(std::size_t);

		void set_first_name(std::string&);
		void set_last_name(std::string&);
                
	public: // Member Operators

      user& operator=(const user&);
	   bool operator==(const user&) const;
      bool operator!=(const user&) const;
		bool operator<(const user&) const;
		bool operator>(const user&) const;

	private: // Private member functions

      user& _assign(const user&);
		bool _equal_to(const user&) const;
		bool _less_than(const user&) const;	

}; // end of class user

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

} // end of namespace LAB

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#endif // __USER_HPP__
